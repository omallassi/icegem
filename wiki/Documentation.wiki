#summary Documentation draft.

<wiki:toc max_depth="2" />

= Introduction =

Icegem is an extension for in-memory data grid [http://community.gemstone.com/display/gemfire/GemFire+Enterprise GemFire Enterprise]^tm^ which provides serialization mechanism for domain classes that will be stored in the GemFire out of the box and eliminates the needs to take care of that routine yet unavoidable task. It guarantees best performance in compare with standard java serialization, supports versioning of the domain model classes and cases where part of the classes have already been serializable.

This library also provides extensions and fill gaps in GemFire API (e.g. supports [Documentation#Paginated_Queries paginated queries], [Documentation#Bucket_oriented_query_service bucket oriented query service], [Documentation#Smart_expiration smart expiration], etc.).

= Build description =

 # getting source:  svn checkout http://icegem.googlecode.com/svn/trunk/icegem-read-only
 # building artifacts: mvn install
        p.s. to build a single module: cd module_folder, mvn install
 # testing: mvn test
 # integration testing: mvn verify

*Note*: some integration test require gemfire license more then embedded. You can specify a custom gemfire license instead of embedded in a main `pom.xml` file.


= Automatic serialization with versioning support =

The library provides mechanism to automatically generate GemFire DataSerializer classes for model objects. 

== Auto serializable annotation ==

Each class that will be auto serialized should be annotated with `@AutoSerializeble` annotation. This annotations contains the following properties:
 *# `dataSerializerID` - an unique id for generated data serializer (required). This id should be the same for all versions of a class;
 *# `versionHistoryLength` - a number of bean versions (except current) for which class model hash codes will be stored in DataSerializer. This property value should be positive, by default `versionHistoryLength = 2`.


== Bean versioning ==

Icegem supports data model versioning. It's achieved by using two annotations `@BeanVersion` and `@SinceVersion`.

In accordance to serialization/deserialization process we impose some restrictions for classes that use versioning:

 * already existed in previous versions of the class fields can't be deleted in new versions;
 * a field that doesn't exist in the first version should be annotated with `@SinceVersion` specifying version from which this field appeared. `@SinceVersion` value should be positive;
 * all versions of a class should have annotation `@AutoSerializable` with the same `dataSerializerID`.

These restrictions refer not only to @AutoSerializable class but also to it's superclasses (except java.lang.Object).
See domain class [Documentation#Domain_class_examples examples] for more details.

== Domain class requirements ==

Icegem imposes some constraints on a domain classes. Partially they are inherited from requirements on DataSerializable implementation and partially they introduced by need to support versioining of model classes :
  * Class should have a public no-arguments constructor;
  * if the class extends another class, superclass should either satisfy this constrains or it should be serializable;
  * nested classes for this class should not be serializable;
  * all class fields should have getters and setters;
  * Class has to comply with JavaBean property definition requirements

*Note*: Object should not contain circular references. See section [Documentation#Autodetection_of_circular_references Autodetection of circular references] for more information about built-in mechanism for detecting circular references.

Each class that will be auto serialized should be annotated with annotations:
 * `@AutoSerializable` - a main annotation that marks auto serializable classes. Additional information about this annotation can be found [Documentation#Auto_serializeble_annotation here];
 * `@BeanVersion` - specifies version of the current class via a required property `value`. This version should be positive. For more details about domain class versioning see this [Documentation#Bean_versioning section].

See domain class [Documentation#Domain_class_examples examples] for more details.    


== Recognition of class model changes ==

Using versioning each class may have arbitrary number of versions. All generated by Icegem library data serializers has build-in functionality for detecting inconsistency between class models using some king of hash code based on class fields that are included into particular class version. 

Property `versionHistoryLength` of annotation `@AutoSerializable` specifies a number of bean versions (except current) for which class model hash codes will be stored in DataSerializer. During deserialization data serializer compares class models and if they are different, a `ClassCastException` will be thrown.

== Domain class examples ==

The first version of the class `Company`:
{{{
package com.googlecode.icegem.serialization.versioning.beans.previousversion.beanv1;

import com.googlecode.icegem.serialization.AutoSerializable;
import com.googlecode.icegem.serialization.BeanVersion;

@AutoSerializable(dataSerializerID = 1412)
@BeanVersion(1)
public class Company {
    private int id;

    public Company() {
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }
    @Override
    public String toString() {
        return "Company{" +
                "id=" + id +
                '}';
    }
}
}}}
The second version of the class `Company` where a new field `name` has been added and `versionHistoryLength` has been set to custom value (default is 5):
{{{
package com.googlecode.icegem.serialization.versioning.beans.previousversion.beanv2;

import com.googlecode.icegem.serialization.AutoSerializable;
import com.googlecode.icegem.serialization.BeanVersion;
import com.googlecode.icegem.serialization.SinceVersion;

@AutoSerializable(dataSerializerID = 1412, versionHistoryLength = 2)
@BeanVersion(2)
public class Company {
    private int id;
    
    private String name;

    public Company() {
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @SinceVersion(2)
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Transient
    public String getCompositeKey(){
         return this.id + this.name;
    }

    @Override
    public String toString() {
        return "Company{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
}
}}}

== Registrar Bean ==

This is a [http://www.springsource.org/ Spring] bean for using in spring-based projects that helps to find all classes for which serialization is required. `AutoSerializableRegistrarBean` scans specified domain model packages for classes annotated with `@AutoSerializable` annotation and passes founded classes to [Documentation#Hierarchy_Registry Hierarchy Registry] class for further  generation and registration of data serializers. Icegem library integration using Spring you can find in this [Documentation#Library_integration_using_Spring section]. There is also a [Documentation#Manual_library_integration section], describes how to integrate the Icegem library manually.

== Autodetection of circular references ==

If classes contain circular references, during serialization of such classes a stack overflow error will be thrown.
Icegem support a build-in mechanism for detecting circular references. By default it is disabled. It can be enabled by using java property `icegem.serialization.trace.methodframes`. This property can be set via JVM parameters: 
{{{
-Dicegem.serialization.trace.methodframes=true
}}}
or from the code using the following command:
{{{
import com.googlecode.icegem.serialization.codegen.MethodFrameCounter;
...
System.setProperty(MethodFrameCounter.SYSTEM_PROPERTY_NAME, "true");
}}}  

== Java native serialization ==

== DataSerializer registration distribution ==
By default registration of any DataSerializable type in GemFire is distributed across DS. icegem allows to control and disable the distribution mechanism. This is done purposely to enforce strong discipline of class management. While in simple case automatic registration simplifies system management, in complex system it may cause hardly identifiable glitches and problems. 

By default automatic distribution is ENABLED.

To disable it, use system property 

{{{
  -Dicegem.serialization.distribute.registration.disabled=true
}}}

== Library integration ==

There are two ways of integrating the Icegem library into a progect: via spring and manually

icegem-core contains a class `AutoSerializableRegistrarBean` that can be used for registration of classes with annotation @AutoSerializable. To use it, you should register this bean in spring like:

  # define bean with class  com.griddynamics.gemfire.serialization.spring.AutoSerializableRegistrarBean
        e.g. 
{{{
<bean id="icegem"  class="com.googlecode.icegem.serialization.spring.AutoSerializableRegistrarBean" scope="singleton">
    ...
</bean>
}}}
  # set property which point to domain model package
        e.g.
{{{
<property name="scanPackages">
    <list>
        <value>com.griddynamics.gemfire.serialization.test.domain</value>
    </list>
</property>
}}}
  # add javassist.jar, icegem-core.jar to ClassPath.

To use  library without spring:

  # add javassist.jar, icegem-core.jar to ClassPath
  # call `HierarchyRegistry.registerAll` with two arguments: class loader and list of domain classes that meet the [Documentation#Domain_class_requirements requirements] for use in the Icegem library.

== Mixing auto and manual serialization ==

In a project both annotated and casual serializable classes (implementing DataSerializable/Serializable or extending DataSerilizer) can be used.

== Performance characteristics ==

[http://code.google.com/p/thrift-protobuf-compare/ Thrift-protobuf-compare] project were used for benchmark testing. 
The data value used in the benchmark:

{{{
MediaContent {

   media = Media {
      uri = "http://javaone.com/keynote.mpg"
      title = "Javaone Keynote"
      width = 640
      height = 480
      format = "video/mpg4"
      duration = 18000000    // half hour in milliseconds
      size = 58982400        // bitrate * duration in seconds / 8 bits per byte
      bitrate = 262144       // 256k
      persons = ["Bill Gates", "Steve Jobs"]
      player = JAVA
      copyright = null
   }

   images = [
      Image {
         uri = "http://javaone.com/keynote_large.jpg"
         title = "Javaone Keynote"
         width = 1024
         height = 768
         size = LARGE
      }
      Image {
         uri = "http://javaone.com/keynote_small.jpg"
         title = "Javaone Keynote"
         width = 320
         height = 240
         size = SMALL
      }
   ]

}

}}} 
The data types (“?” indicates an optional value):

{{{
record Image = {
   uri: String
   title: String?
   width: Int32
   height: Int32
   size: Size

   enum Size = { SMALL, LARGE, }
}

record Media = {
   uri: String
   title: String?
   width: Int32
   height: Int32
   format: String
   duration: Int64
   size: Int64
   bitrate: Int32?
   persons: List<String>
   player: Player
   copyright: String?

   enum Player = { JAVA, FLASH, }
}

record MediaContent = {
   images: List<Image>
   media: Media
}

}}}

=== Results ===


<p>
Create an object, serialize it to a byte array, then deserialize it back to an object and access all fields.
</p>
<p>
<img src='https://chart.googleapis.com/chart?chtt=Total%20Time&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x90&chd=t:4880,6318,65642&chds=0,72206.2044&chxt=y&chxl=0:|java-built-in|icegem|dataserializable-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10,0,10&nonsense=aaa.png'/>

</p>
<br>
<p>
Create an object, serialize it to a byte array.
</p>
<p>
<img src='https://chart.googleapis.com/chart?chtt=Serialization%20Time&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x90&chd=t:3157,3676,11949&chds=0,13144.28995&chxt=y&chxl=0:|java-built-in|icegem|dataserializable-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10,0,10&nonsense=aaa.png'/>

</p>
<br>
<p>
Serialize the same object (i.e. doesn’t include creation time)
</p>
<p>
<img src='https://chart.googleapis.com/chart?chtt=Serialization%20Time%2Bsame&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x90&chd=t:3066,3581,10974&chds=0,12071.73&chxt=y&chxl=0:|java-built-in|icegem|dataserializable-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10,0,10&nonsense=aaa.png'/>

</p>
<br>
<p>
Deserialize an object
</p>
<p>
<img src='https://chart.googleapis.com/chart?chtt=Deserialize%20Time&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x90&chd=t:1623,2517,53464&chds=0,58811.464250000005&chxt=y&chxl=0:|java-built-in|icegem|dataserializable-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10,0,10&nonsense=aaa.png'/>

</p>
<br>
<p>
Deserialize an object and access the top-level fields
</p>
<p>
<img src='https://chart.googleapis.com/chart?chtt=Deserialize%20Time%2Bshal&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x90&chd=t:1671,2583,53553&chds=0,58908.41715000001&chxt=y&chxl=0:|java-built-in|icegem|dataserializable-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10,0,10&nonsense=aaa.png'/>
</p>
<br>
<p>
Often the most expensive operation. To make a fair comparison, all fields of the deserialized instances are accessed – this forces lazy deserializers to really do their work. The raw data below shows additional measurements for deserialization.
</p>
<p>
<img src='https://chart.googleapis.com/chart?chtt=Deserialization%20Time%2Bdeep&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x90&chd=t:1722,2641,53692&chds=0,59061.914450000004&chxt=y&chxl=0:|java-built-in|icegem|dataserializable-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10,0,10&nonsense=aaa.png'/>

</p>
<br>
<p>
The size of the serialized data. These numbers may vary depending on the exact data value being used.
</p>
<p>
<img src='https://chart.googleapis.com/chart?chtt=Serialized%20Size&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x90&chd=t:263,278,889&chds=0,977.9000000000001&chxt=y&chxl=0:|java-built-in|icegem|dataserializable-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10,0,10&nonsense=aaa.png'/>

</p>
<br>
<p>
The size of the serialized data compressed with Java’s built-in implementation of DEFLATE (zlib).
</p>
<p>
<img src='https://chart.googleapis.com/chart?chtt=Serialization%20Compressed%20Size&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x90&chd=t:156,164,523&chds=0,575.3000000000001&chxt=y&chxl=0:|java-built-in|icegem|dataserializable-manual&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10,0,10&nonsense=aaa.png'/>

</p>
<br>
<p>
Create an object (using the classes specified by the serialization tool)
</p>
<p>
<img src='https://chart.googleapis.com/chart?chtt=Object%20Creation%20Time&chf=c||lg||0||FFFFFF||1||76A4FB||0|bg||s||EFEFEF&chs=700x90&chd=t:122,122,122&chds=0,177.198956&chxt=y&chxl=0:|java-built-in|dataserializable-manual|icegem&chm=N *f*,000000,0,-1,10&lklk&chdlp=t&chco=660000|660033|660066|660099|6600CC|6600FF|663300|663333|663366|663399|6633CC|6633FF|666600|666633|666666&cht=bhg&chbh=10,0,10&nonsense=aaa.png'/>

</p>
<br>

= Bucket aware query service =

This service allows to execute OQL queries on a specified set of buckets. The set of buckets is determined by keys of entries that are stored in such buckets: 
 * real and fake keys can be used (such key should have the same routing object as bucket's keys have);
 * it will be enough to specify one key for each bucket.

Bucket oriented query service can be used both on client and server/peer sides.

{{{
public class BucketOrientedQueryService {
    ...

    public static SelectResults<Object> executeOnBuckets(String queryString, Region region, Set<Object> keys) throws QueryException {
        ...
    }

    public static SelectResults<Object> executeOnBuckets(String queryString, Object[] queryParameters, Region region, Set<Object> keys) throws QueryException {
        ...
    }
}
}}}

Where:
 * `queryString` - OQL query string for execute;
 * `queryParameters` - query parameters;
 * `region` - partitioned region on which query will be executed;
 * `keys` - set of keys that specify buckets;

*Usage example:*

{{{
...
SelectResults<Object> results = BucketOrientedQueryService.executeOnBuckets("SELECT * FROM /data WHERE property = $1", new Object[]{1}, data, new HashSet<Object>(Arrays.asList("key1")));
...
}}}
*Note:* `icegem-core.jar` should be added to a ClassPath of all members in a distributed system where OQL query will be executed.

=Paginated Queries=

This component allows to execute paginated queries both from client and peer/server sides. It caches paginated query results in a help region and allows to iterate on them using paginated query API. Paginated query can be created using constructors with different parameters. The full list of parameters can be configured using the following constructor:
{{{
PaginatedQuery(QueryService queryService, int queryLimit, Region region, String queryString, Object[] queryParameters, int pageSize);
}}}

*Where:*

 * `queryService` - a service to run the query;
 * `queryLimit` - a limit on size of query results (default is 1000 entries)^1^;
 * `region` - a region for querying;
 * `queryString` - a query string^2^;
 * `queryParameters` - parameters for query execution;
 * `pageSize` - a size of page (default is 20).

^1^ see a "Limiting of results" section below.
^2^ query string has some limitations. See a "Restrictions" section below.

Query can be parametrized by an entry type. For example, a paginated query for working with a region that contains entries of a type `Person` can be created this way:

{{{
PaginatedQuery<Person> query = new PaginatedQuery<Person>(...);
}}} 

==Requirements==

 # Member (client or peer/server) that wants to execute paginated queries must have in it's local cache:
  * region for querying;
  * help region with name `PaginatedQuery.PAGINATED_QUERY_INFO_REGION_NAME` for storing information about paginated queries. Expiration policy should be configured for this region. This region can be partitioned or replicated and must have the following configuration:
{{{ 
Region<PaginatedQueryPageKey, List<Object>> paginatedQueryInfoRegion;
}}}  
 # All members that store help region must have `icegem-core.jar` in it's ClassPath.

==Restrictions== 

 # A query string for paginated query can be arbitrarily complex but entry key must be part of projection list.
 # For partitioned regions a query string must meet the requirements described in a GemFire documentation for querying partitioned regions. 

*Paginated query object methods:*

 * `page(int pageNumber)` - returns entries for a specified page number;
 * `getPageSize()` - returns size of page (page size is 20 by default);
 * `getTotalNumberOfPages()` - returns a total number of query pages;
 * `getTotalNumberOfEntries()` - returns a total number of query entries;
 * `isLimitExceeded()` - gets value of a flag that indicates excess of query limit;
 * `pageExists(int pageNumber)` - checks that a specified page number exists;

== Ordering of results for partitioned regions ==

A paginated query supports order by functionality on partitioned regions.

*Restrictions*
 # The fields specified in the order by clause must be part of the projection list.
 # Query string with order by clause must contain `distinct` word.

==Limiting of results==

Paginated query result can be limited. By default this limit is 1000 entries. You can specify a custom limit value via paginated query constructor argument. If query results exceeds this limit:
 * only a specified limit number of entries will be cached and returned; 
 * flag `limitExceeded` will be set to `true` (method `isLimitExceeded()` will return true); 

==Workflow==

 # Using one of particular constructors member creates a paginated query based on a specified set of parameters.
 # When the member invokes any of paginated query API methods (except `getPageSize()`) the query executes and it's results are stored into a help region. It happens only if query execution results have not been saved before. Otherwise query results loaded from the help region.
 # Cached query results can be used during some period of time (depends on configuration of expiration policy for the help region). After this time query information will be expired and next time the query will be executed and results will be cached again. 

==Usage example==

Get first page of persons from the region `/person`:
{{{
...
QueryService queryService = cache.getQueryService();
String queryString = "SELECT * FROM /person.keySet";
int pageSize = 10;
PaginatedQuery<Person> query = new PaginatedQuery<Person>(queryService, "person", queryString, pageSize);
if (querty.hasNext()) {
    List<Person> pageEntries = query.page(1);
}
}}}

Get first page of persons with social number = 534 from the region `/person`:
{{{
...
QueryService queryService = cache.getQueryService();
String queryString = "SELECT e.key FROM /person.entrySet e WHERE e.value.socialNumber = $1";
int pageSize = 30;
PaginatedQuery<Person> query = new PaginatedQuery<Person>(queryService, "person", queryString, new Object[]{534}, pageSize);
List<Person> pageEntries = query.page(1);
}}}

Get first page of persons from the region `/person` ordered by social number with total query limit 400:
{{{
...
QueryService queryService = cache.getQueryService();
String queryString = "SELECT DISTINCT d.key, d.value.socialNumber FROM /data.entrySet d ORDER BY d.value.socialNumber";
int pageSize = 10;
int queryLimit = 400;
PaginatedQuery<Person> query = new PaginatedQuery<Person>(queryService, queryLimit, "person", queryString, pageSize);
if (querty.hasNext()) {
    List<Person> pageEntries = query.page(1);
}
}}}

= Smart expiration =

Allows to customize the expiration of region entries. It is possible to define own policy implementing the interface ExpirationPolicy.  


== Example ==

{{{

ClientCache cache = ...; 
Region dataRegion = ...;
Region errorsRegion = ...;

ExpirationController expirationController = new ExpirationController();

long destroyedEntriesNumberForData = expirationController.process(dataRegion,
	new ExpirationPolicy() {

		public boolean isExpired(Entry<Object, Object> entry) {
			// TODO: Add some logic
			return false;
		}
	});

long destroyedEntriesNumberForErrors = expirationController.process(errorsRegion,
	new ExpirationPolicy() {

		public boolean isExpired(Entry<Object, Object> entry) {
			// TODO: Add some logic
			return false;
		}
	});
 
cache.close();

}}}

== How to get access to other regions using smart expiration ==

{{{
new ExpirationPolicy() {

  public boolean isExpired(Entry<Object, Object> entry) {
    RegionService regionService = entry.getRegion().getRegionService();
    Region<Long, TransactionProcessingError> errorsRegion = regionService.getRegion("errors");

    // TODO: Add some logic
    return false;
  }
});
}}}

== Processing with delays ==

The method `ExpirationController#process(Region<?, ?> region, ExpirationPolicy policy)` can overload the processing node. This can block the other activities. 

In such case it is possible to change the packetSize (the size of the consistently expired entries packet) and packetDelay (the delay in processing after the packetSize entries, milliseconds) using setters of these fields. Example:
{{{
ExpirationController expirationController = new ExpirationController();

expirationController.setPacketSize(1000);
expirationController.setPacketDelay(1000);

long destroyedEntriesNumberForData = expirationController.process(dataRegion,
	new ExpirationPolicy() {

		public boolean isExpired(Entry<Object, Object> entry) {
			// TODO: Add some logic
			return false;
		}
	});
}}}


= Cache utils =

Cache utils consists of several utilities which can help with testing, deploying and monitoring of GemFire-related applications.

This is the list of available commands:
  * compare
  * monitor
  * update
  * waitfor
  * check-replication

Cache utils also has the possibility to specify GemFire properties as the system properties:
{{{
java -Dgemfire.log-level=none -Dgemfire.license-file=C:\bin\GemFire6512\gemfireLicense.zip -Dgemfire.license-type=evaluation -jar icegem-cache-utils-0.8-SNAPSHOT-executable.jar -d check-replication -c clusterA=localhost[18081] -c clusterB=localhost[18082] -c clusterC=localhost[18083] -t 30000
}}}

The JVM arguments `-Dgemfire.log-level=none -Dgemfire.license-file=C:\bin\GemFire6512\gemfireLicense.zip -Dgemfire.license-type=evaluation` will be trasferred to the following gemfire properties:
{{{
log-level=none
license-file=C:\bin\GemFire6512\gemfireLicense.zip
license-type=evaluation
}}}

Also there are options which are common for all the commands and specified next after jar name:
{{{
D:\Temp>java -jar icegem-cache-utils-0.8-SNAPSHOT-executable.jar
usage: java -jar icegem-cache-utils-<version>.jar [options] <compare |
            monitor | check-replication | update | waitfor>
            [command_specific_options]
 -d,--debug   Print debug information
 -h,--help    Print usage information
 -q,--quiet   Quiet output. Doesn't work if --debug specified.
}}}
<wiki:comment>
compare

Compares data of the specified region in specified cache servers (mode REPLICATION) or specified locators of the same cluster. It is also possible to provide list of java packages to restrict comparison.

=== Result of comparison ===

Result of comparison - list of the results for the each checked node. For each node there is complex object which contains:
  * set of missing keys (set of all keys minus set of local keys)
  * set of extra keys (set of local keys minus set of all keys)
  * set of different keys (key is present in both sets - local and all, but values are different)
  * node identifier

=== Usage help ===

This is the application help for the command "comparator":

{{{
D:\Temp\icegem-cache-utils-0.7-SNAPSHOT>java -jar icegem-cache-utils-0.7-SNAPSHOT.jar comparator
usage: comparator
 -c,--packages <arg>   Enumerate packages to scan for @AutoSerializable
                       model classes. Delimiter is a comma sign.
 -h,--help             Print usage information
 -l,--locators <arg>   Locators of GemFire system. For intra-cluster
                       checking. Example: host1[port1],host2[port2]
 -p,--path <arg>       Region path to be compared. Only replicated region
                       could be used. Example: /region1/region2
 -s,--servers <arg>    Servers of GemFire system. For multi-cluster
                       systems. Example: host1[port1],host2[port2]
}}}

The following command will start comparator utility. Replicated region with path "/data" will be compared on the cache servers `localhost[40402]`,`localhost[40403]` and `localhost[40405]` :

{{{
java -jar icegem-cache-utils-0.7-SNAPSHOT.jar comparator -p /data -s localhost[40402],localhost[40403],localhost[40405]
}}}
</wiki:comment>

== monitor ==

In addition to JMX agent monitor command is able to detect deadlocks of cache servers and provide hooks for custom handlers. 

=== Configuration ===

All the configuration of the monitoring tool is in the two property files:
  * monitoring.properties - the main configuration file which points the tool to the GemFire network, sets delay and period, configures email texts and setups the email SMTP server settings
  * log4j.properties - configures logging

=== Usage help ===

This is the application help for the command "monitor":

{{{
D:\Temp>java -jar icegem-cache-utils-0.8-SNAPSHOT-executable.jar monitor
usage: monitor <--help | --server [--timeout] | --all <--locators>
               [--period] [--timeout] >
 -a,--all              Periodically check all the servers related to
                       locators specified in monitoring.properties file
 -h,--help             Print usage information
 -l,--locators <arg>   List of locators in format
                       host1[port1],host2[port2]
 -p,--period <arg>     Period between runs, ms. Default value is 10000
 -s,--server <arg>     Check one server and exit with status 0 if server
                       alive, or with status 1 if server is dead or down.
                       Server should be in format host[port].
 -t,--timeout <arg>    Timeout, ms. Default value is 3000
}}}

Examples of usage:
{{{
java -jar icegem-cache-utils-0.7-SNAPSHOT.jar monitor -s localhost[40404]
}}}
Checks that server on host=localhost and port=40404 is alive. Returns exit code `0` in case of the server alive, 1 in case of its down, -1 in case of there is some other error like misconfiguration.


{{{
java -jar icegem-cache-utils-0.7-SNAPSHOT.jar monitor -a -l localhost[10355]
}}}
Monitor will check periodically all the servers related to locator `localhost[10355]`, write to console and log file, and also will send alert messages.

== update ==

The command traverses region and simply gets the value for each entry of the region and puts it back to the same key. This is required to upgrade binary form of object in persistent storage to format used by the currently deployed code. 

While this can be done in run-time, if any problem occurs, system lock down can happen. So the update has to be done before go live.

=== Usage help ===

This is the application help for the command "updater":
{{{
D:\Temp\icegem-cache-utils-0.7-SNAPSHOT>java -jar icegem-cache-utils-0.7-SNAPSHOT.jar updater
usage: updater
 -a,--all              Update all regions in system
 -c,--subregions       Indicate whether to update all subregions of
                       mentioned regions
 -h,--help             Print usage information
 -l,--locator <arg>    Locator of GemFire system. Example: host[port]
 -p,--packages <arg>   Enumerate packages to scan for @AutoSerializable
                       model classes. Delimiter is a comma sign.
 -r,--regions <arg>    Enumerate regions to be updated here. Delimiter is
                       a comma sign. Example: region1,region2,region3...
 -s,--server <arg>     Server of GemFire system. Example: host[port]
}}}

Examples of usage:
{{{
java -jar icegem-cache-utils-0.7-SNAPSHOT.jar updater -a -l localhost[10355] -s localhost[40404]
}}}
This will cause updater to update all regions in distributed system with locator `localhost[10355]` and cache server `localhost[40404]`
{{{
java -jar icegem-cache-utils-0.7-SNAPSHOT.jar updater -r region1,region2 -c -l localhost[10355] -s localhost[40404]
}}}
This will cause updater to update regions region1 and region2 with all its' subregions in distributed system with locator `localhost[10355]` and cache server `localhost[40404]`

== waitfor ==

Wait appearance of an object in a region

=== Usage help ===

{{{
java -jar icegem-cache-utils-*-SNAPSHOT.jar signal
-region regionName     where needed key will appear
-locators              locator(s) list in format host[port],..
-key                   key value, that will appear in signal region (java.lang.String)
-timeout               how long utility will check region, in millis (default: 60sec)
-checkInterval         in what period utility will check region, in millis (default: 1 sec)
}}}
Example:

{{{
java -jar icegem-cache-utils-0.7-SNAPSHOT.jar signal -region signalRegion -locators localhost[10334],localhost[10355] -key signalKey
}}}

== check-replication ==

Checks that WAN replication works between the specified clusters. Also measures and prints latency for each replication link.  Due the chosen measurement method the displayed values give higher threshold for latency which can be significantly shorter. 

=== Usage help ===

This is the application help for the command "replication":

{{{
D:\Temp>java -jar icegem-cache-utils-0.8-SNAPSHOT-executable.jar check-replication
usage: check-replication [options]
 -c,--cluster <cluster=locators>   Cluster name and list of its locators.
                                   There should be at least two clusters.
                                   Example: -c
                                   cluster1=locator1[port1],locator2[port2] -c
                                   cluster2=host3[port3]
 -h,--help                         Print usage information
 -r,--region <arg>                 The name of region for this test.
                                   Default name is "proxy"
 -t,--timeout <arg>                Timeout, ms. Default timeout is 60000
}}}

Examples of usage:

{{{
java -Dgemfire.log-level=none -Dgemfire.license-file=C:\bin\GemFire6512\gemfireLicense.zip -Dgemfire.license-type=evaluation -jar icegem-cache-utils-0.8-SNAPSHOT-executable.jar check-replication -c clusterA=localhost[18081] -c clusterB=localhost[18082] -c clusterC=localhost[18083] -t 10000
}}}

Replication tool will check replication for the clusters with locators `localhost[18081]`, `localhost[18082]` and `localhost[18083]`. In case of replication works in all directions, the tool will print time of replication and return exit code 0. 

{{{
clusterA <= [clusterB, 956ms][clusterC, 1242ms]
clusterC <= [clusterB, 722ms][clusterA, 590ms]
clusterB <= [clusterC, 1054ms][clusterA, 177ms]
}}}

In case of replication doesn't work it will automatically finish in 10 seconds and return exit code 1.

{{{
clusterA <= [clusterC, 468ms][clusterB, 751ms]
Connection process is not finished for clusterB
clusterC <= [clusterA, 556ms][clusterB, 684ms]
}}}