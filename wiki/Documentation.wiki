#summary Documentation draft.

<wiki:toc max_depth="1" />

  * Performance characteristics

 Appendix
    * Supported types.


= Introduction =

Icegem is an extension for Gemfire(tm) which provides serialization mechanism for domain objects out of the box and eliminates the needs to take care of that routine yet unavoidable task. It supports versioning of the model classes, cases where part of the objects are already implementing serialization and guarantees best performance in compare with standard java serialization. 


= Model objects constraints =

Icegem imposes some constraints on model classes. Which are:
  * Model class should have public parameterless constructor, which doesn't declare it could throw any exception.
  * If model class extends another class implicitly, superclass should either conform with previous constraint or it should be serializable as well.
  * It's nested classes should not be serializable.
  * A getter name start with "get", take 0 parameters, returns a value and is not parametrized. 
  * A setter name start with "set", takes 1 parameter and not be parametrized. 

Also object should not contain cyclic references.

= Architecture and implementation =

The architecture of Icegem consists of the four main components:

  * GemFireBeanRegistry
  * HierarchyRegistry
  * DataSerializerGenerator
  * Introspector

=== GemFireBeanRegistry ===

It resides in icegem-spring module, apart from core functionality. And it is just convenient utility for spring-based projects which helps to find all classes for which serialization is required. In short GemFireBeanRegistry scans model packages for classes annotated with @AutoSerialized annotation, creates DataSerializers for them and registeres them with GemFire, so no additional job is required. Usage details you can find below in [Documentation#Spring_Integration Spring Integration] section. There is also section, describes how to use Icegem without icegem-spring - [Documentation#Lib_without_Spring_integration Lib without Spring integration]

=== HierarchyRegistry ===

Takes as parameter list of classes to be serialized and sends them to DataSerializerGenerator which generates corresponding DataSerializers. HierarchyRegistry then registers these DataSerializers with GemFire.

=== DataSerializerGenerator ===

The main component of the system. It performs main operations of the framework -  generation of DataSerializers for model classes. The algorithm is simple. First class is checked for validity, i.e. it should conform with requirements described in [Document#Model_objects_constraints Model objects constraints] section. Then if class is valid DataSerializerGenerator creates <Class name>DataSerializer class which extends [http://www.gemstone.com/docs/6.0.1/product/docs/japi/com/gemstone/gemfire/DataSerializer.html com.gemstone.gemfire.DataSerializer] class. There are four public method to be implemented within those DataSerializers:
{{{
public Class[] getSupportedClasses();

public int getId();

public boolean toData(Object o, DataOutput out) throws IOException;

public Object fromData(DataInput in) throws IOException, ClassNotFoundException;
}}}

  * `getSupportedClasses()` - this method will return sole class for which serializer is created
  * `getId()` - will return unique identifier of DataSerializer
  * `toData(...)` - will serialize an object to a `DataOutput`
  * `fromData(...)` -will read an object from a `DataInput`

Class generation is performed with the help of [http://www.csg.is.titech.ac.jp/~chiba/javassist/ javassist library]. 

=== Introspector ===   

Introspector performs tasks of checking class validity. 

= Usage instructions =

There are two ways of integrating Icegem into progect - via spring and manually. Both cases described below:

== Spring Integration ==

spring-icegem.jar has useful class to register all files with annotation @AutoSerializable. to use it, you need register it in spring like:

  # define bean with class  com.griddynamics.gemfire.serialization.spring.GemFireBeanRegistry
        e.g. 
{{{
<bean id="icegem"  class="com.griddynamics.gemfire.serialization.spring.GemFireBeanRegistry" scope="singleton">
    ...
</bean>
}}}
  # set property which point to domain model package
        e.g.
{{{
<property name="scanPackages">
    <list>
        <value>com.griddynamics.gemfire.serialization.test.domain</value>
    </list>
</property>
}}}
  # add javassist.jar, icegem-core.jar to ClassPath.

== Lib without Spring integration ==

To use  library without spring-icegem.jar

  # add javassist.jar, icegem-core.jar to ClassPath
  # call HierarchyRegistry.registerAll with two arguments: class loader and list of annotated classes with @AutoSerilizable


= Build description=

  # getting source:  svn checkout http://icegem.googlecode.com/svn/trunk/icegem-read-only

  # building artifacts: mvn install
        p.s. to build a single module: cd module_folder, mvn install

= Special cases (mixing auto and manual serialization) =

you can use as DataSerilizable objects as annotated with @AutoSerializable in a project.