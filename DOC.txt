Object Size:
    Bean {} - 0 bit
    Bean {int x} - 4 byte
    Bean {int x, short y, byte z} - 7 byte
    Bean {boolean x} - ???
    Bean {Boolean x} - ???
    Bean {Boolean[] x} - ??? -      
    Bean {enum}
    Bean {enum[]}
    Bean {List[]}
    Bean {Beann{boolean} x} - ???
    Bean {Beann{boolean}[] x} - ???
    Bean {List<Beann{boolean}> x} - ???
    Bean {Integer x} - 33 bit
    Bean {List<Integer> x} - ??? (one bit/byte for every index?)
    Bean {Integer[] x} - ??? (one bit/byte for every index?)
    Bean {String x} - ???


---------------------
FIELD TYPE:
    "System types":
        primitives,
        wrappers,
        String -        ? (dataoutput/dataserializer/modified UTF-8)
        Object -     
        Date: 1) read as Date 2) write as Date |||OR: !Date - throw ex?
        ??? Locale, TimeZone
        ??? BigDecimal / BigInteger
        ??? URL / URI
        ??? Currency
        ??? UUID
        /// Hessian: Calendar, Class, Collection, Enum, Iterator, Locale, Map, Throwable, SqlDate
    "Systems types" arrays of any dimensions
    Collections:
        List
            A: List, ?AL, ?LL,
            B: other interfaces/classes (?RandomList, ..)
            C: self implementors/other libs
        Set
            A:
            B:
            C:
        Map
            A:
            B:
            C:
        Collection
            ???
        Strange: Iterator, Enumeration, Vector, Hashtable, ...
FORBIDDEN FIELD TYPES:
    InputStream, DataInput, File
    Class
    CharSequence, StringBuilder, StringBuffer, etc - use String/char[]/byte[], ???But we use good scheme???
    ???Number - ???use concrete type
    ???Calendar, GregorianCalendar, other children of Calendar (...Budha, Japan)


---------- enum
    - enum    root   property
    - enum       
    -  enum   -    (        : for example - java.sql.ClientInfoStatus).  -          .
    -          (,  enum -  ) -  .name()     GF  dataserializer.writeEnum()/readEnum()

---------- inheritance
@AutoSerializable
    -             
    -           
    -  @AutoSerializable  
    -     ,   -  (: Figure: {@SerClass-Oval, @SerClass-Rect})
    - (  -   ,  , ..  ,    )
    -     , ,  (???enum, ???collection)
@TransientGetter
    ?   ??  
    ?     ??  
    -       
    -  @TransientGetter  
    -    / ,      / 
    - [  overriding of getter for DTO - bad practice]

---------- procedure of validation
    -    (public, @SC, ?enum ?collection)
    -      get*
    -   getter-
    -      ( )
    -   -


---------- procedure of serialization
    -  :
        ? field:List -> value:ArrayList (or AR->AR, LL->LL, other->AR)
        - field:ArrayList -> value:ArrayList
        - field:LinkedList -> value:LinkedList
        - field:Collection -> value:AR
        - field:Map -> value:HM (or HM->HM, ?->?, other->HM)
        - field:HashMap -> value:HM
        - field:HashMap -> value:HM 
